{"ast":null,"code":"var _jsxFileName = \"E:\\\\NLP\\\\NLP-Project\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const defaultText = \"Welcome to the Text Summarization web app! This tool allows you to input any text and get a concise summary. You can start by clicking 'Summarize' to summarize this text, or clear it and input a new text.\";\n  const [text, setText] = useState(defaultText); // Set default introduction text\n  const [summary, setSummary] = useState(\"\");\n\n  // Handle Summarization\n  const handleSummarize = async () => {\n    const response = await fetch(\"http://localhost:5000/summarize\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        text\n      })\n    });\n    const data = await response.json();\n    setSummary(data.summary || \"Error generating summary\");\n  };\n\n  // Handle clearing the text\n  const handleClear = () => {\n    setText(defaultText); // Reset to default text\n  };\n\n  // Update text area when user types\n  const handleChange = e => {\n    if (e.target.value === defaultText) {\n      setText(\"\"); // Clear default text when user starts typing\n    } else {\n      setText(e.target.value);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: \"20px\",\n      maxWidth: \"600px\",\n      margin: \"auto\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Text Summarization\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      rows: \"5\",\n      style: {\n        width: \"100%\"\n      },\n      value: text,\n      onChange: handleChange,\n      placeholder: \"Enter text to summarize\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: \"10px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSummarize,\n        style: {\n          marginRight: \"10px\"\n        },\n        children: \"Summarize\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleClear,\n        children: \"Clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Summary:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: summary\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"bZ+mUp1VrnOFSLOUURIAMnJHdwg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","defaultText","text","setText","summary","setSummary","handleSummarize","response","fetch","method","headers","body","JSON","stringify","data","json","handleClear","handleChange","e","target","value","style","padding","maxWidth","margin","children","fileName","_jsxFileName","lineNumber","columnNumber","rows","width","onChange","placeholder","marginTop","onClick","marginRight","_c","$RefreshReg$"],"sources":["E:/NLP/NLP-Project/frontend/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\nfunction App() {\r\n  const defaultText = \"Welcome to the Text Summarization web app! This tool allows you to input any text and get a concise summary. You can start by clicking 'Summarize' to summarize this text, or clear it and input a new text.\";\r\n  const [text, setText] = useState(defaultText); // Set default introduction text\r\n  const [summary, setSummary] = useState(\"\");\r\n\r\n  // Handle Summarization\r\n  const handleSummarize = async () => {\r\n    const response = await fetch(\"http://localhost:5000/summarize\", {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({ text }),\r\n    });\r\n    const data = await response.json();\r\n    setSummary(data.summary || \"Error generating summary\");\r\n  };\r\n\r\n  // Handle clearing the text\r\n  const handleClear = () => {\r\n    setText(defaultText);  // Reset to default text\r\n  };\r\n\r\n  // Update text area when user types\r\n  const handleChange = (e) => {\r\n    if (e.target.value === defaultText) {\r\n      setText(\"\");  // Clear default text when user starts typing\r\n    } else {\r\n      setText(e.target.value);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={{ padding: \"20px\", maxWidth: \"600px\", margin: \"auto\" }}>\r\n      <h2>Text Summarization</h2>\r\n      <textarea\r\n        rows=\"5\"\r\n        style={{ width: \"100%\" }}\r\n        value={text}\r\n        onChange={handleChange}\r\n        placeholder=\"Enter text to summarize\"\r\n      />\r\n      <div style={{ marginTop: \"10px\" }}>\r\n        <button onClick={handleSummarize} style={{ marginRight: \"10px\" }}>\r\n          Summarize\r\n        </button>\r\n        <button onClick={handleClear}>Clear</button>\r\n      </div>\r\n      <h3>Summary:</h3>\r\n      <p>{summary}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAMC,WAAW,GAAG,8MAA8M;EAClO,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAACK,WAAW,CAAC,CAAC,CAAC;EAC/C,MAAM,CAACG,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;;EAE1C;EACA,MAAMU,eAAe,GAAG,MAAAA,CAAA,KAAY;IAClC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,iCAAiC,EAAE;MAC9DC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEX;MAAK,CAAC;IAC/B,CAAC,CAAC;IACF,MAAMY,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;IAClCV,UAAU,CAACS,IAAI,CAACV,OAAO,IAAI,0BAA0B,CAAC;EACxD,CAAC;;EAED;EACA,MAAMY,WAAW,GAAGA,CAAA,KAAM;IACxBb,OAAO,CAACF,WAAW,CAAC,CAAC,CAAE;EACzB,CAAC;;EAED;EACA,MAAMgB,YAAY,GAAIC,CAAC,IAAK;IAC1B,IAAIA,CAAC,CAACC,MAAM,CAACC,KAAK,KAAKnB,WAAW,EAAE;MAClCE,OAAO,CAAC,EAAE,CAAC,CAAC,CAAE;IAChB,CAAC,MAAM;MACLA,OAAO,CAACe,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;IACzB;EACF,CAAC;EAED,oBACEtB,OAAA;IAAKuB,KAAK,EAAE;MAAEC,OAAO,EAAE,MAAM;MAAEC,QAAQ,EAAE,OAAO;MAAEC,MAAM,EAAE;IAAO,CAAE;IAAAC,QAAA,gBACjE3B,OAAA;MAAA2B,QAAA,EAAI;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC3B/B,OAAA;MACEgC,IAAI,EAAC,GAAG;MACRT,KAAK,EAAE;QAAEU,KAAK,EAAE;MAAO,CAAE;MACzBX,KAAK,EAAElB,IAAK;MACZ8B,QAAQ,EAAEf,YAAa;MACvBgB,WAAW,EAAC;IAAyB;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtC,CAAC,eACF/B,OAAA;MAAKuB,KAAK,EAAE;QAAEa,SAAS,EAAE;MAAO,CAAE;MAAAT,QAAA,gBAChC3B,OAAA;QAAQqC,OAAO,EAAE7B,eAAgB;QAACe,KAAK,EAAE;UAAEe,WAAW,EAAE;QAAO,CAAE;QAAAX,QAAA,EAAC;MAElE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACT/B,OAAA;QAAQqC,OAAO,EAAEnB,WAAY;QAAAS,QAAA,EAAC;MAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzC,CAAC,eACN/B,OAAA;MAAA2B,QAAA,EAAI;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACjB/B,OAAA;MAAA2B,QAAA,EAAIrB;IAAO;MAAAsB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACb,CAAC;AAEV;AAAC7B,EAAA,CAlDQD,GAAG;AAAAsC,EAAA,GAAHtC,GAAG;AAoDZ,eAAeA,GAAG;AAAC,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}